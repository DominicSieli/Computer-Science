Time Complexity Analysis
- Access Complexity: Constant Time O(N)
- Searching Complexity: Linear Time O(N)
- Inserting Complexity: Linear Time O(1)
- Deleting Complexity: Linear Time O(1)

Functions
- Push(T) O(1)
- T Pop() O(1)
- T Peek() O(1)
- bool isEmpty(T) O(1)

The time complexity of all stack oporations is constant O(1).

The preferable implementation of a stack is a dynamically allocated linked list.

A stack is represented by an linked list with at least one node.

The first index is null while the second index contains the first element.

A stack has a LIFO (last in first out) access pattern.

Only the top element of a stack can be popped.

New elements are only pushed to the top of the stack.

Stacks are central to Depth-First search algorithms.

Common operations
Push: Adds a new element to the top of the stack.
Pop: Removes the top element from the stack, and returns the value of the element.
Peek: Returns the value of the top element without removing it.
IsEmpty: Checks if the stack is empty.